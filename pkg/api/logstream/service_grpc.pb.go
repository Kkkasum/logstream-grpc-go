// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/logstream/service.proto

package logstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogsService_SaveLog_FullMethodName        = "/logstream.LogsService/SaveLog"
	LogsService_SaveLogStream_FullMethodName  = "/logstream.LogsService/SaveLogStream"
	LogsService_ListLog_FullMethodName        = "/logstream.LogsService/ListLog"
	LogsService_ListLogStream_FullMethodName  = "/logstream.LogsService/ListLogStream"
	LogsService_ListLogs_FullMethodName       = "/logstream.LogsService/ListLogs"
	LogsService_ListLogsStream_FullMethodName = "/logstream.LogsService/ListLogsStream"
)

// LogsServiceClient is the client API for LogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsServiceClient interface {
	// SaveLog - save log
	SaveLog(ctx context.Context, in *SaveLogRequest, opts ...grpc.CallOption) (*SaveLogResponse, error)
	// SaveLogStream - save logs in stream
	SaveLogStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SaveLogRequest, SaveLogResponse], error)
	// ListLog - list log
	ListLog(ctx context.Context, in *ListLogRequest, opts ...grpc.CallOption) (*ListLogResponse, error)
	// ListLog - list log in stream
	ListLogStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListLogRequest, ListLogResponse], error)
	// ListLogs - list logs
	ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsResponse, error)
	// ListLogsStream - list logs in stream
	ListLogsStream(ctx context.Context, in *ListLogsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListLogsStreamResponse], error)
}

type logsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsServiceClient(cc grpc.ClientConnInterface) LogsServiceClient {
	return &logsServiceClient{cc}
}

func (c *logsServiceClient) SaveLog(ctx context.Context, in *SaveLogRequest, opts ...grpc.CallOption) (*SaveLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveLogResponse)
	err := c.cc.Invoke(ctx, LogsService_SaveLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsServiceClient) SaveLogStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SaveLogRequest, SaveLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogsService_ServiceDesc.Streams[0], LogsService_SaveLogStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveLogRequest, SaveLogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsService_SaveLogStreamClient = grpc.BidiStreamingClient[SaveLogRequest, SaveLogResponse]

func (c *logsServiceClient) ListLog(ctx context.Context, in *ListLogRequest, opts ...grpc.CallOption) (*ListLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLogResponse)
	err := c.cc.Invoke(ctx, LogsService_ListLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsServiceClient) ListLogStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ListLogRequest, ListLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogsService_ServiceDesc.Streams[1], LogsService_ListLogStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListLogRequest, ListLogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsService_ListLogStreamClient = grpc.BidiStreamingClient[ListLogRequest, ListLogResponse]

func (c *logsServiceClient) ListLogs(ctx context.Context, in *ListLogsRequest, opts ...grpc.CallOption) (*ListLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLogsResponse)
	err := c.cc.Invoke(ctx, LogsService_ListLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsServiceClient) ListLogsStream(ctx context.Context, in *ListLogsStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListLogsStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogsService_ServiceDesc.Streams[2], LogsService_ListLogsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListLogsStreamRequest, ListLogsStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsService_ListLogsStreamClient = grpc.ServerStreamingClient[ListLogsStreamResponse]

// LogsServiceServer is the server API for LogsService service.
// All implementations must embed UnimplementedLogsServiceServer
// for forward compatibility.
type LogsServiceServer interface {
	// SaveLog - save log
	SaveLog(context.Context, *SaveLogRequest) (*SaveLogResponse, error)
	// SaveLogStream - save logs in stream
	SaveLogStream(grpc.BidiStreamingServer[SaveLogRequest, SaveLogResponse]) error
	// ListLog - list log
	ListLog(context.Context, *ListLogRequest) (*ListLogResponse, error)
	// ListLog - list log in stream
	ListLogStream(grpc.BidiStreamingServer[ListLogRequest, ListLogResponse]) error
	// ListLogs - list logs
	ListLogs(context.Context, *ListLogsRequest) (*ListLogsResponse, error)
	// ListLogsStream - list logs in stream
	ListLogsStream(*ListLogsStreamRequest, grpc.ServerStreamingServer[ListLogsStreamResponse]) error
	mustEmbedUnimplementedLogsServiceServer()
}

// UnimplementedLogsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogsServiceServer struct{}

func (UnimplementedLogsServiceServer) SaveLog(context.Context, *SaveLogRequest) (*SaveLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLog not implemented")
}
func (UnimplementedLogsServiceServer) SaveLogStream(grpc.BidiStreamingServer[SaveLogRequest, SaveLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SaveLogStream not implemented")
}
func (UnimplementedLogsServiceServer) ListLog(context.Context, *ListLogRequest) (*ListLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLog not implemented")
}
func (UnimplementedLogsServiceServer) ListLogStream(grpc.BidiStreamingServer[ListLogRequest, ListLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListLogStream not implemented")
}
func (UnimplementedLogsServiceServer) ListLogs(context.Context, *ListLogsRequest) (*ListLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (UnimplementedLogsServiceServer) ListLogsStream(*ListLogsStreamRequest, grpc.ServerStreamingServer[ListLogsStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListLogsStream not implemented")
}
func (UnimplementedLogsServiceServer) mustEmbedUnimplementedLogsServiceServer() {}
func (UnimplementedLogsServiceServer) testEmbeddedByValue()                     {}

// UnsafeLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServiceServer will
// result in compilation errors.
type UnsafeLogsServiceServer interface {
	mustEmbedUnimplementedLogsServiceServer()
}

func RegisterLogsServiceServer(s grpc.ServiceRegistrar, srv LogsServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogsService_ServiceDesc, srv)
}

func _LogsService_SaveLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServiceServer).SaveLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogsService_SaveLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServiceServer).SaveLog(ctx, req.(*SaveLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogsService_SaveLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogsServiceServer).SaveLogStream(&grpc.GenericServerStream[SaveLogRequest, SaveLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsService_SaveLogStreamServer = grpc.BidiStreamingServer[SaveLogRequest, SaveLogResponse]

func _LogsService_ListLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServiceServer).ListLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogsService_ListLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServiceServer).ListLog(ctx, req.(*ListLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogsService_ListLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogsServiceServer).ListLogStream(&grpc.GenericServerStream[ListLogRequest, ListLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsService_ListLogStreamServer = grpc.BidiStreamingServer[ListLogRequest, ListLogResponse]

func _LogsService_ListLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServiceServer).ListLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogsService_ListLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServiceServer).ListLogs(ctx, req.(*ListLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogsService_ListLogsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLogsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogsServiceServer).ListLogsStream(m, &grpc.GenericServerStream[ListLogsStreamRequest, ListLogsStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogsService_ListLogsStreamServer = grpc.ServerStreamingServer[ListLogsStreamResponse]

// LogsService_ServiceDesc is the grpc.ServiceDesc for LogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logstream.LogsService",
	HandlerType: (*LogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLog",
			Handler:    _LogsService_SaveLog_Handler,
		},
		{
			MethodName: "ListLog",
			Handler:    _LogsService_ListLog_Handler,
		},
		{
			MethodName: "ListLogs",
			Handler:    _LogsService_ListLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveLogStream",
			Handler:       _LogsService_SaveLogStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListLogStream",
			Handler:       _LogsService_ListLogStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListLogsStream",
			Handler:       _LogsService_ListLogsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/logstream/service.proto",
}
